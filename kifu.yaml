maininitpy:
    userauth: |
        def main(global_config, **settings):
            settings["app_root"] = abspath(dirname(dirname(__file__)))
            initialize_sql(settings)
            
            authn_policy = AuthTktAuthenticationPolicy(
                settings.get("auth.secret"),
                callback=UserMgr.auth_groupfinder,
                hashalg="sha512",
                timeout=1200,
                reissue_time=300)
            authz_policy = ACLAuthorizationPolicy()

            session_factory = SignedCookieSessionFactory(settings.get("session.secret"))

            config = Configurator(settings=settings,
                root_factory="~~~PROJNAME~~~.RootFactory",
                authentication_policy=authn_policy,
                authorization_policy=authz_policy,
                session_factory=session_factory)

            config.set_request_factory(RequestWithUserAttribute)
            config = build_routes(config)
            config.add_renderer('jsonp', JSONP(param_name='callback'))
            config.registry['mailer'] = Mailer.from_settings(settings)
    mainimports: |
        from os.path import abspath
        from os.path import dirname
        
        from pyramid.authentication import AuthTktAuthenticationPolicy
        from pyramid.authorization import ACLAuthorizationPolicy

        from pyramid.renderers import JSONP

        from ~~~PROJNAME~~~.lib.access import RequestWithUserAttribute
        from ~~~PROJNAME~~~.models.auth import UserMgr
        from ~~~PROJNAME~~~.models import initialize_sql
        from ~~~PROJNAME~~~.routes import build_routes
        
        from pyramid.security import Allow
        from pyramid.security import Everyone
        from pyramid.security import ALL_PERMISSIONS

        from pyramid.session import SignedCookieSessionFactory
        from pyramid_mailer.mailer import Mailer

        class RootFactory(object):
            __acl__ = [(Allow, Everyone, ALL_PERMISSIONS)]
        
            def __init__(self, request):
                if request.matchdict:
                    self.__dict__.update(request.matchdict)
        
        